import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv
import logging
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import hcode, hbold
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

from generator import generate

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

TOKEN = os.getenv("TG_TOKEN")
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.environ.get("PORT", 10000))
WEBHOOK_PATH = "/webhook"
BASE_WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://sadf-pufq.onrender.com")
AI_SERVICE_URL = os.getenv("AI_SERVICE_URL", "https://hdghs.onrender.com/chat")

storage = MemoryStorage()
dp = Dispatcher(storage=storage)
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode="HTML"))

class UserState(StatesGroup):
    selected_model = State()

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

MODELS = {
    "deepseek": "üß† DeepSeek 0324",
    "deepseek-r1": "üöÄ DeepSeek R1",
    "deepseek-v3": "üíé DeepSeek v3",
    "gemini": "üîÆ Gemini 2.5",
    "gemma": "üíé Gemma 27B",
    "qwen": "üé≤ Qwen 32B",
    "qwen 2.5": "üé≤ Qwen 2.5",
    "llama-4-maverick": "ü¶ô Llama Maverick",
    "llama-4-scout": "ü¶ô Llama Scout"
}

def get_model_keyboard(selected: str = None) -> types.InlineKeyboardMarkup:
    buttons = []
    for key, name in MODELS.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        status_icon = "üîµ" if key == selected else "‚ö™"
        btn_text = f"{status_icon} {name}"
        buttons.append([types.InlineKeyboardButton(
            text=btn_text, 
            callback_data=key
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –≤–µ–±-–∫–Ω–æ–ø–∫—É
    buttons.append([
        types.InlineKeyboardButton(
            text="üåç Web App", 
            web_app=types.WebAppInfo(url="https://w5model.netlify.app/")
        )
    ])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.callback_query()
async def model_selected(callback: types.CallbackQuery, state: FSMContext):
    model_key = callback.data
    if model_key not in MODELS:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å", show_alert=True)
        return
    
    try:
        await state.update_data(selected_model=model_key)
        await callback.message.edit_text(
            text=f"üéõÔ∏è <b>–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:</b>\n{MODELS[model_key]}",
            reply_markup=get_model_keyboard(model_key)
        )
        await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {MODELS[model_key]}", show_alert=True)
    except Exception as e:
        logger.error(f"Error updating model: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏", show_alert=True)


@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        await state.set_data({"selected_model": "deepseek"})
        await message.answer(
            f"{hbold('ü§ñ AI Assistant Bot')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: üß† DeepSeek Chat",
            reply_markup=get_model_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in cmd_start: {str(e)}")

@dp.message(Command("model"))
async def select_model(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await message.answer(
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:",
        reply_markup=get_model_keyboard(user_data.get('selected_model'))
    )

@dp.callback_query()
async def model_selected(callback: types.CallbackQuery, state: FSMContext):
    model_key = callback.data
    if model_key not in MODELS:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        return
    
    await state.update_data(selected_model=model_key)
    await callback.message.edit_reply_markup(
        reply_markup=get_model_keyboard(model_key)
    )
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞: {MODELS[model_key]}")


    # ... –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã ...
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ChatActions

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ handle_message ...

@dp.message()
async def handle_message(message: types.Message, state: FSMContext):
    try:
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        user_data = await state.get_data()
        model = user_data.get('selected_model', 'deepseek')
        
        logger.info(f"Processing message with model [{model}]: {message.text}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("‚è≥ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        response = await generate(message.text, AI_SERVICE_URL, model)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        formatted = response.replace("```", "'''").replace("`", "'")
        if any(kw in response.lower() for kw in ["python", "code", "javascript"]):
            response = f"üìù –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ {MODELS[model]}:\n{hcode(formatted)}"
        else:
            response = f"üìù –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ {MODELS[model]}:\n{formatted}"
            
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"Error handling message: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 10-15 —Å–µ–∫—É–Ω–¥.")


async def on_startup(app: web.Application):
    try:
        await bot.set_webhook(f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}")
        logger.info("Bot started successfully")
    except Exception as e:
        logger.error(f"Startup error: {str(e)}")
        raise

def main():
    app = web.Application()
    app.on_startup.append(on_startup)
    webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    web.run_app(app, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)

if __name__ == '__main__':
    main()