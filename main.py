# main.py
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv
import logging
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import hcode, hbold
from aiogram.client.default import DefaultBotProperties

from generator import generate

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TOKEN = os.getenv("TG_TOKEN")
BASE_WEBHOOK_URL = os.getenv("WEBHOOK_URL")
AI_SERVICE_URL = f"http://localhost:{os.environ.get('PORT', 10000)}/chat"  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å FastAPI

if not TOKEN:
    logger.critical("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TG_TOKEN")
    exit(1)
if not BASE_WEBHOOK_URL:
    logger.critical("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç WEBHOOK_URL")
    exit(1)

WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.environ.get("PORT", 10000))
WEBHOOK_PATH = "/webhook"

storage = MemoryStorage()
dp = Dispatcher(storage=storage)
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode="HTML"))

class UserState(StatesGroup):
    selected_model = State()

MODELS = {
    "deepseek": "üß† DeepSeek 0324",
    "deepseek-r1": "üöÄ DeepSeek R1",
    "deepseek-v3": "üíé DeepSeek v3",
    "gemini": "üîÆ Gemini Pro",
    "gemma": "üíé Gemma 27B",
    "qwen": "üé≤ Qwen 32B",
    "qwen 2.5": "üé≤ Qwen 2.5",
    "llama-4-maverick": "ü¶ô Llama Maverick",
    "llama-4-scout": "ü¶ô Llama Scout"
}

def get_model_keyboard(selected: str = None) -> types.InlineKeyboardMarkup:
    buttons = []
    for key, name in MODELS.items():
        status_icon = "üü¢" if key == selected else "‚ö™"
        buttons.append([
            types.InlineKeyboardButton(
                text=f"{status_icon} {name}", 
                callback_data=f"model_{key}"
            )
        ])
    buttons.append([
        types.InlineKeyboardButton(
            text="üåç Web App", 
            web_app=types.WebAppInfo(url="https://w5model.netlify.app/")
        )
    ])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        await state.set_data({"selected_model": "deepseek"})
        await message.answer(
            f"{hbold('ü§ñ AI Assistant Bot')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: üß† DeepSeek Chat",
            reply_markup=get_model_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
    

@dp.message(Command("model"))
async def select_model(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await message.answer(
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:",
        reply_markup=get_model_keyboard(user_data.get('selected_model'))
    )

@dp.callback_query(lambda c: c.data.startswith('model_'))
async def model_selected(callback: types.CallbackQuery, state: FSMContext):
    model_key = callback.data.replace('model_', '')
    if model_key not in MODELS:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å", show_alert=True)
        return
    
    try:
        await state.update_data(selected_model=model_key)
        await callback.message.edit_text(
            text=f"üéõÔ∏è <b>–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:</b>\n{MODELS[model_key]}",
            reply_markup=get_model_keyboard(model_key)
        )
        await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {MODELS[model_key]}", show_alert=False)
        logger.info(f"User {callback.from_user.id} selected: {model_key}")
    except Exception as e:
        logger.error(f"Model select error: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏", show_alert=True)

@dp.message()
async def handle_message(message: types.Message, state: FSMContext):
    try:
        await message.bot.send_chat_action(message.chat.id, "typing")
        user_data = await state.get_data()
        model = user_data.get('selected_model', 'deepseek')
        
        logger.info(f"Model: {model} | Query: {message.text}")
        
        processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        
        response = await generate(message.text, AI_SERVICE_URL, model)
        
        await processing_msg.delete()
        
        if not response:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
            
        formatted = response.replace("```", "'''")
        response_text = f"üìù {MODELS[model]}:\n{hcode(formatted)}"
        
        await message.answer(response_text)
        
    except asyncio.TimeoutError:
        await message.answer("‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)[:200]}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

@dp.get("/")
async def health_check(request: web.Request):
    return web.Response(text="Bot is running", status=200)

async def on_startup(app: web.Application):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL –≤–µ–±—Ö—É–∫–∞
        webhook_url = f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}"
        if not webhook_url.startswith("https://"):
            logger.error("‚ùå WEBHOOK_URL –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS")
            exit(1)
            
        logger.info(f"üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫: {webhook_url}")
        await bot.set_webhook(webhook_url)
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: " + ", ".join(MODELS.keys()))
        
    except Exception as e:
        logger.critical(f"üö® –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        exit(1)

def main():
    app = web.Application()
    app.add_routes([web.get("/", health_check)])
    app.on_startup.append(on_startup)
    webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    
    try:
        web.run_app(app, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)
    except Exception as e:
        logger.critical(f"üö® –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        exit(1)

if __name__ == '__main__':
    main()