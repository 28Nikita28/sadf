# main.py
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv
import logging
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import hcode, hbold
from aiogram.client.default import DefaultBotProperties
from generator import generate

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app import app as fastapi_app

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TG_TOKEN")
BASE_WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not TOKEN:
    logger.critical("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TG_TOKEN")
    exit(1)
if not BASE_WEBHOOK_URL:
    logger.critical("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç WEBHOOK_URL")
    exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.environ.get("PORT", 10000))
WEBHOOK_PATH = "/webhook"
AI_SERVICE_URL = f"{BASE_WEBHOOK_URL}/chat"

storage = MemoryStorage()
dp = Dispatcher(storage=storage)
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode="HTML"))

class UserState(StatesGroup):
    selected_model = State()

MODELS = {
    "deepseek": "üß† DeepSeek 0324",
    "deepseek-r1": "üöÄ DeepSeek R1",
    "deepseek-v3": "üíé DeepSeek v3",
    "gemini": "üîÆ Gemini Pro",
    "gemma": "üíé Gemma 27B",
    "qwen": "üé≤ Qwen 32B",
    "qwen 2.5": "üé≤ Qwen 2.5",
    "llama-4-maverick": "ü¶ô Llama Maverick",
    "llama-4-scout": "ü¶ô Llama Scout"
}

def get_model_keyboard(selected: str = None) -> types.InlineKeyboardMarkup:
    buttons = []
    for key, name in MODELS.items():
        status_icon = "üü¢" if key == selected else "‚ö™"
        buttons.append([
            types.InlineKeyboardButton(
                text=f"{status_icon} {name}", 
                callback_data=f"model_{key}"
            )
        ])
    buttons.append([
        types.InlineKeyboardButton(
            text="üåç Web App", 
            web_app=types.WebAppInfo(url="https://w5model.netlify.app/")
        )
    ])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.set_data({"selected_model": "deepseek"})
    await message.answer(
        f"{hbold('ü§ñ AI Assistant Bot')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: üß† DeepSeek Chat",
        reply_markup=get_model_keyboard()
    )

@dp.message(Command("model"))
async def select_model(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await message.answer(
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:",
        reply_markup=get_model_keyboard(user_data.get('selected_model'))
    )

@dp.callback_query(lambda c: c.data.startswith('model_'))
async def model_selected(callback: types.CallbackQuery, state: FSMContext):
    model_key = callback.data.replace('model_', '')
    if model_key not in MODELS:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å", show_alert=True)
        return
    
    await state.update_data(selected_model=model_key)
    await callback.message.edit_text(
        text=f"üéõÔ∏è <b>–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:</b>\n{MODELS[model_key]}",
        reply_markup=get_model_keyboard(model_key)
    )
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {MODELS[model_key]}", show_alert=False)

@dp.message()
async def handle_message(message: types.Message, state: FSMContext):
    try:
        await message.bot.send_chat_action(message.chat.id, "typing")
        user_data = await state.get_data()
        model = user_data.get('selected_model', 'deepseek')
        
        processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        response = await generate(message.text, AI_SERVICE_URL, model)
        await processing_msg.delete()
        
        formatted = response.replace("```", "'''")
        await message.answer(f"üìù {MODELS[model]}:\n{hcode(formatted)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)[:200]}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

async def on_startup(app: web.Application):
    webhook_url = f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}"
    await bot.set_webhook(webhook_url)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

def main():
    # –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    aioapp = web.Application()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
    SimpleRequestHandler(dp, bot).register(aioapp, path=WEBHOOK_PATH)
    
    # –ú–æ–Ω—Ç–∏—Ä—É–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    aioapp.add_subapp("/api", fastapi_app)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    setup_application(aioapp, dp, bot=bot)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    web.run_app(aioapp, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)

if __name__ == '__main__':
    main()