from aiogram import Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import logging
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import hcode, hbold
from aiogram.client.default import DefaultBotProperties
from aiohttp import web

from generator import generate

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TOKEN = os.getenv("TG_TOKEN")
if not TOKEN:
    logger.critical("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TG_TOKEN")
    exit(1)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode="HTML"))

class UserState(StatesGroup):
    selected_model = State()

MODELS = {
    "deepseek": "üß† DeepSeek 0324",
    "deepseek-r1": "üöÄ DeepSeek R1",
    "deepseek-v3": "üíé DeepSeek v3",
    "gemini": "üîÆ Gemini Pro",
    "gemma": "üíé Gemma 27B",
    "qwen": "üé≤ Qwen 32B",
    "qwen 2.5": "üé≤ Qwen 2.5",
    "llama-4-maverick": "ü¶ô Llama Maverick",
    "llama-4-scout": "ü¶ô Llama Scout"
}

def get_model_keyboard(selected: str = None) -> types.InlineKeyboardMarkup:
    buttons = []
    for key, name in MODELS.items():
        status_icon = "üü¢" if key == selected else "‚ö™"
        buttons.append([
            types.InlineKeyboardButton(
                text=f"{status_icon} {name}", 
                callback_data=f"model_{key}"
            )
        ])
    buttons.append([
        types.InlineKeyboardButton(
            text="üåç Web App", 
            web_app=types.WebAppInfo(url="https://w5model.netlify.app/")
        )
    ])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        await state.set_data({"selected_model": "deepseek"})
        await message.answer(
            f"{hbold('ü§ñ AI Assistant Bot')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: ÔøΩ DeepSeek Chat",
            reply_markup=get_model_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")

@dp.message(Command("model"))
async def select_model(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await message.answer(
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:",
        reply_markup=get_model_keyboard(user_data.get('selected_model'))
    )

@dp.callback_query(lambda c: c.data.startswith('model_'))
async def model_selected(callback: types.CallbackQuery, state: FSMContext):
    try:
        model_key = callback.data.split('_')[1]
        if model_key not in MODELS:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
            return

        await state.update_data(selected_model=model_key)
        await callback.message.edit_reply_markup(
            reply_markup=get_model_keyboard(model_key)
        )
        await callback.answer(f"‚úÖ {MODELS[model_key]}")
        
    except Exception as e:
        logger.error(f"Callback error: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

@dp.message()
async def handle_message(message: types.Message, state: FSMContext):
    try:
        await message.bot.send_chat_action(message.chat.id, "typing")
        user_data = await state.get_data()
        model = user_data.get('selected_model', 'deepseek')
        
        logger.info(f"Model: {model} | Query: {message.text}")
        
        processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL
        response = await generate(message.text, "https://hdghs.onrender.com", model)
        
        await processing_msg.delete()
        
        if not response:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
            
        formatted = response.replace("```", "'''")
        response_text = f"üìù {MODELS[model]}:\n{hcode(formatted)}"
        
        await message.answer(response_text)
        
    except asyncio.TimeoutError:
        await message.answer("‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)[:200]}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

async def main():
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞")
    logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: " + ", ".join(MODELS.keys()))
    await dp.start_polling(bot)

async def on_startup(dp: Dispatcher):
    await bot.delete_webhook(drop_pending_updates=True)

async def start_bot(app):
    await dp.start_polling(bot)

async def dummy_handler(request):
    return web.Response(text="OK")

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render
    app = web.Application()
    app.router.add_get("/", dummy_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    
    # –ü–æ—Ä—Ç –¥–ª—è Render
    PORT = int(os.getenv("PORT", 8000))
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π shutdown
    try:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞")
        await dp.start_polling(bot, handle_as_tasks=True)
    finally:
        await runner.cleanup()  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

if __name__ == '__main__':
    asyncio.run(main())