import asyncio
import os
from aiogram import Bot, Dispatcher
from aiogram.types import Message, MenuButtonWebApp, WebAppInfo
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
from aiohttp import web

from generator import generate

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Reg(StatesGroup):
    wait = State()

# ========================
# üèóÔ∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê
# ========================
async def startup(bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é –±–æ—Ç–∞"""
    await bot.set_chat_menu_button(
        menu_button=MenuButtonWebApp(
            text="üåê App",
            web_app=WebAppInfo(url="https://w5model.netlify.app/")
        )
    )

# ========================
# üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# ========================
@dp.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∏–∫–æ–Ω–∫—É "üåê App" —Å–ø—Ä–∞–≤–∞ –≤–Ω–∏–∑—É.')

@dp.message(Reg.wait)
async def waiting(message: Message):
    """–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è"""
    await message.answer('–°–µ–∫—É–Ω–¥–æ—á–∫—É!')

@dp.message()
async def gpt_work(message: Message, state: FSMContext):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await state.set_state(Reg.wait)
    result = await generate(message.text)
    await message.answer(result)
    await state.clear()

# ========================
# üåê WEB SERVER SETUP
# ========================
async def web_server():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render"""
    app = web.Application()
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 8000))
    site = web.TCPSite(runner, host='0.0.0.0', port=port)
    await site.start()
    print(f"Web server started on port {port}")

# ========================
# üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ========================
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = Bot(os.getenv("TG_TOKEN"))
    await startup(bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(
        dp.start_polling(bot),
        web_server()
    )

if __name__ == '__main__':
    asyncio.run(main())
