import aiohttp
import json
import logging
from pprint import pformat

logger = logging.getLogger(__name__)

async def generate(text: str, ai_url: str, model: str) -> str:
    try:
        async with aiohttp.ClientSession() as session:
            headers = {"Content-Type": "application/json"}
            payload = {"userInput": text, "model": model}

            async with session.post(ai_url, json=payload, headers=headers) as response:
                response.raise_for_status()
                response_data = await response.json()

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
                if isinstance(response_data, dict):
                    content = response_data.get("content", "")
                    if any(kw in content for kw in ["{", "}", "[", "]", "="]):
                        return pformat(content, width=80)
                    return content
                return "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"

    except aiohttp.ClientError as e:
        logger.error(f"Connection error: {e}")
        return "üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º"
    except json.JSONDecodeError:
        logger.error("Invalid JSON response")
        return "üìÑ –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞"
    except Exception as e:
        logger.error(f"General error: {e}")
        return "‚öôÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"