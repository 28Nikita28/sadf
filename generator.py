import json  # –ò–º–ø–æ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω–æ
import aiohttp
import logging
import asyncio
from pprint import pformat

logger = logging.getLogger(__name__)

async def generate(text: str, ai_url: str, model: str) -> str:
    max_retries = 3
    timeout = aiohttp.ClientTimeout(total=60)
    response_data = await response.json()
    
    for attempt in range(max_retries):
        try:
            async with aiohttp.ClientSession(timeout=timeout) as session:
                headers = {"Content-Type": "application/json"}
                payload = {"userInput": text, "model": model}

                async with session.post(ai_url, json=payload, headers=headers) as response:
                    if response.status == 503:
                        logger.info(f"Service sleeping, retry {attempt + 1}")
                        await asyncio.sleep(10 * (attempt + 1))
                        continue
                        
                    response.raise_for_status()
                    response_data = await response.json()

                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    if isinstance(response_data, dict):
                        content = response_data.get("content", "")
                        if any(kw in content for kw in ["{", "}", "[", "]", "="]):
                            return pformat(content, width=80)
                        return content
                    return "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"

        except aiohttp.ClientError as e:
            logger.error(f"Connection error: {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(5)
                continue
            return "üîå –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥"
            
        except Exception as e:
            logger.error(f"General error: {e}")
            return "‚öôÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
        
        except json.JSONDecodeError:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å json
             logger.error("Invalid JSON response")
             return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞"
    
    return "üîå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –°–µ—Ä–≤–∏—Å –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç—Å—è..."

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)